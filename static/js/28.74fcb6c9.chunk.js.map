{"version":3,"file":"static/js/28.74fcb6c9.chunk.js","mappings":"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","sources":["components/TerminalShowcase.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  ReferenceLine,\n} from \"recharts\";\nimport { Terminal, Activity, Clock } from \"lucide-react\";\n\nexport const TerminalShowcase = () => {\n  const [command, setCommand] = useState(\"\");\n  const [commandHistory, setCommandHistory] = useState([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  const outputRef = useRef(null);\n  const inputRef = useRef(null);\n  const [output, setOutput] = useState([\n    {\n      type: \"info\",\n      content: [\n        \"Welcome to Trading Terminal v1.0.0\",\n        'Type \"help\" to see available commands',\n        'Type \"trade start\" to begin simulation',\n      ],\n    },\n  ]);\n  const [priceData, setPriceData] = useState([]);\n  const [currentPrice, setCurrentPrice] = useState(100);\n  const [isTrading, setIsTrading] = useState(false);\n  const [volatility, setVolatility] = useState(0.001);\n  const lastPriceRef = useRef(100);\n  const trendRef = useRef(0);\n  const [portfolio, setPortfolio] = useState({\n    cash: 100000,\n    positions: {},\n    history: [],\n  });\n\n  // price movements\n  const generateNewPrice = useCallback(() => {\n    const momentum = 0.7;\n    const meanReversion = 0.1;\n    const basePrice = 100;\n\n    trendRef.current =\n      momentum * trendRef.current +\n      (1 - momentum) *\n        ((Math.random() - 0.5) * volatility +\n          (meanReversion * (basePrice - lastPriceRef.current)) / basePrice);\n\n    const newPrice = lastPriceRef.current * (1 + trendRef.current);\n    lastPriceRef.current = newPrice;\n    return newPrice;\n  }, [volatility]);\n\n  // price data\n  useEffect(() => {\n    const initialData = [];\n    let lastPrice = 100;\n\n    for (let i = 0; i < 100; i++) {\n      lastPrice = lastPrice * (1 + (Math.random() - 0.5) * 0.002);\n      initialData.push({\n        time: i,\n        price: lastPrice,\n        timestamp: new Date(Date.now() - (100 - i) * 1000).toLocaleTimeString(),\n      });\n    }\n\n    setPriceData(initialData);\n    lastPriceRef.current = lastPrice;\n    setCurrentPrice(lastPrice);\n  }, []);\n\n  // price updates\n  useEffect(() => {\n    if (isTrading) {\n      const interval = setInterval(() => {\n        setPriceData((prevData) => {\n          const newPrice = generateNewPrice();\n          setCurrentPrice(newPrice);\n\n          const newData = [\n            ...prevData.slice(1),\n            {\n              time: prevData[prevData.length - 1].time + 1,\n              price: newPrice,\n              timestamp: new Date().toLocaleTimeString(),\n            },\n          ];\n\n          if (Math.random() < 0.05) {\n            setVolatility((prev) => prev * (Math.random() < 0.5 ? 1.5 : 0.7));\n          }\n\n          return newData;\n        });\n      }, 100);\n\n      return () => clearInterval(interval);\n    }\n  }, [isTrading, generateNewPrice]);\n\n  // Auto-scroll terminal output\n  useEffect(() => {\n    if (outputRef.current) {\n      outputRef.current.scrollTop = outputRef.current.scrollHeight;\n    }\n  }, [output]);\n\n  // Focus input on mount\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  const formatPrice = (price) => price.toFixed(2);\n  const formatQuantity = (qty) => qty.toFixed(4);\n\n  const executeTrade = (type, amount) => {\n    const quantity = amount / currentPrice;\n    const newPortfolio = { ...portfolio };\n\n    if (type === \"buy\") {\n      if (amount > portfolio.cash) {\n        return \"Insufficient funds\";\n      }\n      newPortfolio.cash -= amount;\n      newPortfolio.positions.BTC = (newPortfolio.positions.BTC || 0) + quantity;\n    } else {\n      const currentQuantity = portfolio.positions.BTC || 0;\n      if (quantity > currentQuantity) {\n        return \"Insufficient position\";\n      }\n      newPortfolio.cash += amount;\n      newPortfolio.positions.BTC = currentQuantity - quantity;\n    }\n\n    newPortfolio.history.push({\n      type,\n      price: currentPrice,\n      quantity,\n      amount,\n      timestamp: new Date().toLocaleTimeString(),\n    });\n\n    setPortfolio(newPortfolio);\n    return `${type.toUpperCase()} ${formatQuantity(quantity)} BTC at $${formatPrice(currentPrice)}`;\n  };\n\n  const commands = {\n    help: () => ({\n      type: \"info\",\n      content: [\n        \"Trading Commands:\",\n        \"trade start  - Start trading simulation\",\n        \"trade stop   - Stop trading simulation\", \n        \"buy amount   - Buy BTC (e.g., buy 1000)\",\n        \"sell amount  - Sell BTC (e.g., sell 1000)\",\n        \"portfolio    - View current portfolio\",\n        \"history     - View trade history\",\n        \"clear       - Clear terminal\",\n        \"\",\n        \"Use arrow keys (↑↓) to navigate command history\",\n      ],\n    }),\n    trade: (args) => {\n      if (args === \"start\") {\n        setIsTrading(true);\n        return {\n          type: \"info\",\n          content: \"Trading simulation started\",\n        };\n      } else if (args === \"stop\") {\n        setIsTrading(false);\n        return {\n          type: \"info\",\n          content: \"Trading simulation stopped\",\n        };\n      }\n    },\n    buy: (amount) => ({\n      type: \"trade\",\n      content: executeTrade(\"buy\", parseFloat(amount)),\n    }),\n    sell: (amount) => ({\n      type: \"trade\",\n      content: executeTrade(\"sell\", parseFloat(amount)),\n    }),\n    portfolio: () => ({\n      type: \"portfolio\",\n      content: {\n        cash: portfolio.cash,\n        positions: portfolio.positions,\n        total: portfolio.cash + (portfolio.positions.BTC || 0) * currentPrice,\n      },\n    }),\n    history: () => ({\n      type: \"history\",\n      content: portfolio.history,\n    }),\n    clear: () => {\n      setOutput([]);\n      return null;\n    },\n  };\n\n  const handleCommand = (e) => {\n    e.preventDefault();\n    const [cmd, ...args] = command.trim().toLowerCase().split(\" \");\n\n    // Add to command history\n    if (command.trim()) {\n      setCommandHistory((prev) => [command, ...prev.slice(0, 49)]); // Keep last 50 commands\n      setHistoryIndex(-1);\n    }\n\n    setOutput((prev) => [\n      ...prev,\n      { type: \"command\", content: `> ${command}` },\n    ]);\n\n    if (commands[cmd]) {\n      const result = commands[cmd](args.join(\" \"));\n      if (result) {\n        setOutput((prev) => [...prev, result]);\n      }\n    } else if (command.trim()) {\n      setOutput((prev) => [\n        ...prev,\n        {\n          type: \"error\",\n          content: `Command not found: ${command}. Type 'help' for available commands.`,\n        },\n      ]);\n    }\n\n    setCommand(\"\");\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"ArrowUp\") {\n      e.preventDefault();\n      if (historyIndex < commandHistory.length - 1) {\n        const newIndex = historyIndex + 1;\n        setHistoryIndex(newIndex);\n        setCommand(commandHistory[newIndex]);\n      }\n    } else if (e.key === \"ArrowDown\") {\n      e.preventDefault();\n      if (historyIndex > 0) {\n        const newIndex = historyIndex - 1;\n        setHistoryIndex(newIndex);\n        setCommand(commandHistory[newIndex]);\n      } else if (historyIndex === 0) {\n        setHistoryIndex(-1);\n        setCommand(\"\");\n      }\n    }\n  };\n\n  const CustomTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"bg-gray-900 border border-green-500 p-2 text-xs\">\n          <p className=\"text-green-500\">Price: ${data.price.toFixed(2)}</p>\n          <p className=\"text-green-400\">{data.timestamp}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const renderOutput = (item) => {\n    switch (item.type) {\n      case \"command\":\n        return <div className=\"text-green-500\">{item.content}</div>;\n      case \"error\":\n        return <div className=\"text-red-500\">{item.content}</div>;\n      case \"trade\":\n        return <div className=\"text-yellow-500\">{item.content}</div>;\n      case \"portfolio\":\n        return (\n          <div className=\"border border-green-900 p-2\">\n            <div className=\"text-green-500\">Portfolio Summary:</div>\n            <div className=\"grid grid-cols-2 gap-2 mt-2\">\n              <div>Cash: ${formatPrice(item.content.cash)}</div>\n              <div>BTC: {formatQuantity(item.content.positions.BTC || 0)}</div>\n              <div>Total Value: ${formatPrice(item.content.total)}</div>\n            </div>\n          </div>\n        );\n      case \"history\":\n        return (\n          <div className=\"border border-green-900 p-2\">\n            <div className=\"text-green-500 mb-2\">Trade History:</div>\n            {item.content.map((trade, idx) => (\n              <div key={idx} className=\"text-xs grid grid-cols-4 gap-2\">\n                <span>{trade.timestamp}</span>\n                <span\n                  className={\n                    trade.type === \"buy\" ? \"text-green-500\" : \"text-red-500\"\n                  }\n                >\n                  {trade.type.toUpperCase()}\n                </span>\n                <span>{formatQuantity(trade.quantity)} BTC</span>\n                <span>${formatPrice(trade.price)}</span>\n              </div>\n            ))}\n          </div>\n        );\n      default:\n        return (\n          <div className=\"text-white\">\n            {Array.isArray(item.content)\n              ? item.content.map((line, idx) => <div key={idx}>{line}</div>)\n              : item.content}\n          </div>\n        );\n    }\n  };\n\n  // color\n  const priceChange =\n    priceData.length > 1\n      ? priceData[priceData.length - 1].price -\n        priceData[priceData.length - 2].price\n      : 0;\n\n  const chartColor = priceChange >= 0 ? \"#22c55e\" : \"#ef4444\";\n\n  return (\n    <section id=\"trading\" className=\"min-h-screen bg-black text-green-500 font-mono py-20\">\n      <div className=\"container mx-auto px-4\">\n        {/* Terminal Header */}\n        <div className=\"border border-green-900 p-2 mb-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Terminal size={14} />\n            <span className=\"text-xs\">\n              TRADING_TERMINAL <span className=\"text-green-600\">{`<F1>`}</span>\n            </span>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Activity size={14} />\n              <span className=\"text-xs\">\n                {isTrading ? \"LIVE TRADING\" : \"SYSTEM IDLE\"}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Clock size={14} />\n              <span className=\"text-xs\">{new Date().toLocaleTimeString()}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Price Chart */}\n        <div className=\"border border-green-900 bg-black p-4 mb-4\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-xs\">BTC/USD</span>\n            <div className=\"flex items-center gap-4\">\n              <span\n                className={`text-sm ${priceChange >= 0 ? \"text-green-500\" : \"text-red-500\"}`}\n              >\n                ${currentPrice.toFixed(2)}\n              </span>\n              <span\n                className={`text-xs ${priceChange >= 0 ? \"text-green-500\" : \"text-red-500\"}`}\n              >\n                {priceChange >= 0 ? \"▲\" : \"▼\"}\n                {Math.abs(priceChange).toFixed(2)}\n              </span>\n            </div>\n          </div>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={priceData}>\n                <XAxis\n                  dataKey=\"timestamp\"\n                  interval=\"preserveStartEnd\"\n                  tick={{ fontSize: 10, fill: \"#6B7280\" }}\n                  minTickGap={50}\n                />\n                <YAxis\n                  domain={[\"auto\", \"auto\"]}\n                  tick={{ fontSize: 10, fill: \"#6B7280\" }}\n                  orientation=\"right\"\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <ReferenceLine\n                  y={currentPrice}\n                  stroke=\"#666\"\n                  strokeDasharray=\"3 3\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"price\"\n                  stroke={chartColor}\n                  dot={false}\n                  strokeWidth={1.5}\n                  isAnimationActive={false}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        {/* Terminal Window */}\n        <div className=\"border border-green-900 bg-black p-4\">\n          <div ref={outputRef} className=\"h-[30vh] overflow-y-auto space-y-2 mb-4\">\n            {output.map((item, idx) => (\n              <div key={idx} className=\"mb-2\">\n                {renderOutput(item)}\n              </div>\n            ))}\n          </div>\n\n          {/* Command Input */}\n          <form\n            onSubmit={handleCommand}\n            className=\"flex items-center gap-2 border-t border-green-900 pt-4\"\n          >\n            <span className=\"text-green-500\">{\">\"}</span>\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={command}\n              onChange={(e) => setCommand(e.target.value)}\n              onKeyDown={handleKeyDown}\n              className=\"flex-1 bg-transparent text-white outline-none\"\n              placeholder=\"Type 'help' for available commands...\"\n              autoFocus\n            />\n          </form>\n        </div>\n\n        {/* Quick Commands */}\n        <div className=\"border border-green-900 mt-4 p-2\">\n          <div className=\"text-xs flex items-center justify-between\">\n            <span>\n              Quick commands: trade start, buy 1000, sell 1000, portfolio,\n              history\n            </span>\n            <span className=\"text-green-600\">Press Enter to execute</span>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n"],"names":["TerminalShowcase","command","setCommand","useState","commandHistory","setCommandHistory","historyIndex","setHistoryIndex","outputRef","useRef","inputRef","output","setOutput","type","content","priceData","setPriceData","currentPrice","setCurrentPrice","isTrading","setIsTrading","volatility","setVolatility","lastPriceRef","trendRef","portfolio","setPortfolio","cash","positions","history","generateNewPrice","useCallback","current","Math","random","newPrice","useEffect","initialData","lastPrice","i","push","time","price","timestamp","Date","now","toLocaleTimeString","interval","setInterval","prevData","newData","slice","length","prev","clearInterval","scrollTop","scrollHeight","focus","formatPrice","toFixed","formatQuantity","qty","executeTrade","amount","quantity","newPortfolio","BTC","currentQuantity","toUpperCase","commands","help","trade","args","buy","parseFloat","sell","total","clear","CustomTooltip","_ref","active","payload","data","_jsxs","className","children","_jsx","renderOutput","item","map","idx","Array","isArray","line","priceChange","chartColor","id","Terminal","size","Activity","Clock","abs","ResponsiveContainer","width","height","LineChart","XAxis","dataKey","tick","fontSize","fill","minTickGap","YAxis","domain","orientation","Tooltip","ReferenceLine","y","stroke","strokeDasharray","Line","dot","strokeWidth","isAnimationActive","ref","onSubmit","e","preventDefault","cmd","trim","toLowerCase","split","result","join","value","onChange","target","onKeyDown","key","newIndex","placeholder","autoFocus"],"sourceRoot":""}